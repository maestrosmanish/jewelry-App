// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
} 
model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  phone      String
  role       String    @default("user")
  status     Boolean   @default(true)

  
  address    String?
  city       String?
  state      String?
  pincode    String?
  country    String?   @default("India")

  products   Product[]
  cartItems  CartItem[]
  orders     Order[]
  otp        String?
  otpExpires DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  overview      String?
  price         Int
  discount      Int       @default(0)
  quantity      Int       @default(0)
  status        String    @default("in-stock")
  averageRating Float     @default(0)
  numReviews    Int       @default(0)
  images        Json
  metalType     String?
  purity        String?
  weight        Float?
  stoneDetails  Json?
  size          String?
  gender        String?
  occasion      String?

  userId        Int
  categoryId    Int

  user          User       @relation(fields: [userId], references: [id])
  category      Category   @relation(fields: [categoryId], references: [id])
  cartItems     CartItem[]
  orderItems    OrderItem[] 
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int?
  parent        Category?  @relation("CategoryToSub", fields: [parentId], references: [id], onDelete: Cascade)
  subCategories Category[] @relation("CategoryToSub")
  products      Product[]

  @@unique([name, parentId]) 
}


  enum PaymentType {
    CASH
    CARD
    UPI
    PAYPAL
    OTHER
  }


model Order {
  id            Int           @id @default(autoincrement())
  userId        Int
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentType   PaymentType? 

  address       String
  city          String
  state         String
  pincode       String
  country       String

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  user      User         @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}


enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
